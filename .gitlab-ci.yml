stages:
    - build
    - test
    - namespaces
    - secrets
    - system
    - certificates

variables:
    PROD_KUBECONFIG: prod-kubeconfig.yml
    RUNNER_IMAGE: registry.gitlab.com/startfleet/gitlab-runner:v1.1
before_script:
    - mkdir ~/.kube/
    - echo $KUBECONFIG_PROD | base64 -d > ~/.kube/config

## Templates ##
.test-template: &test-template
    stage: test
    image: $RUNNER_IMAGE
    tags:
        - startfleet
.deploy-template: &deploy-template
    image: $RUNNER_IMAGE
    when: manual
    tags:
        - startfleet

### Tests ###
namespaces-test:
    <<: *test-template
    script:
        - kubectl apply -f namespaces --dry-run=true
secrets-test:
    <<: *test-template
    script:
        - kubectl apply -f secrets --dry-run=true
certificates-test:
    <<: *test-template
    script:
        - kubectl apply -f certificates --dry-run=true

### Deploy namespaces ###
armadacar-namespace:
    stage: namespaces
    <<: *deploy-template
    script:
        - kubectl apply -f namespaces/armadacar-namespace.yml
user-api-namespace:
    stage: namespaces
    <<: *deploy-template
    script:
        - kubectl apply -f namespaces/user-api-namespace.yml
hasura-namespace:
    stage: namespaces
    <<: *deploy-template
    script:
        - kubectl apply -f namespaces/hasura-namespace.yml
cert-manager-namespace:
    stage: namespaces
    <<: *deploy-template
    script:
        - kubectl apply -f namespaces/cert-manager-namespace.yml
keycloak-namespace:
    stage: namespaces
    <<: *deploy-template
    script:
        - kubectl apply -f namespaces/keycloak-namespace.yml
entreprise-admin-namespace:
    stage: namespaces
    <<: *deploy-template
    script:
        - kubectl apply -f namespaces/entreprise-admin-namespace.yml
### Deploy secrets ###
armadacar-secrets:
    stage: secrets
    <<: *deploy-template
    script:
        - kubectl apply -f secrets/armadacar-regsecret.yml
entreprise-admin-secrets:
    stage: secrets
    <<: *deploy-template
    script:
        - kubectl apply -f secrets/entreprise-admin-regsecret.yml
keycloak-secrets:
    stage: secrets
    <<: *deploy-template
    script:
        - kubectl apply -f secrets/keycloak-secret.yml
        - kubectl apply -f secrets/keycloak-regsecret.yml
hasura-secrets:
    stage: secrets
    <<: *deploy-template
    script:
        - kubectl apply -f secrets/hasura-app-secret.yml
        - kubectl apply -f secrets/hasura-connector-secret.yml
user-api-secrets:
    stage: secrets
    <<: *deploy-template
    script:
        - kubectl apply -f secrets/user-api-regsecret.yml
### Deploy system ###
cert-manager:
    stage: system
    <<: *deploy-template
    script:
        - kubectl apply -f system/cert-manager.yaml
cluster-issuer:
    # step for the cluster issuer for the certificates bc the cert-manager webhook is long to start
    stage: system
    <<: *deploy-template
    script:
        - kubectl apply -f system/prod-issuer.yml

### Deploy certificates ###
hasura:
    stage: certificates
    <<: *deploy-template
    script: 
        - kubectl apply -f certificates/hasura-crt.yml
armadacar:
    stage: certificates
    <<: *deploy-template
    script: 
        - kubectl apply -f certificates/armadacar-crt.yml
keycloak:
    stage: certificates
    <<: *deploy-template
    script: 
        - kubectl apply -f certificates/keycloak-crt.yml
entreprise-admin:
    stage: certificates
    <<: *deploy-template
    script: 
        - kubectl apply -f certificates/entreprise-admin-crt.yml