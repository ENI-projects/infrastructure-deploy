stages:
    - build
    - test
    - namespaces
    - secrets
    - system
    - certificates

variables:
    PROD_KUBECONFIG: prod-kubeconfig.yml
    RUNNER_IMAGE: registry.gitlab.com/startfleet/gitlab-runner:v1.1
    
## Templates ##
.test-template: &test-template
    stage: test
    image: $RUNNER_IMAGE
    tags:
        - startfleet

.deploy-template: &deploy-template
    image: $RUNNER_IMAGE
    when: manual
    tags:
        - startfleet

# build
kubeconfig:
    stage: build
    script:
        - echo $KUBECONFIG | base64 -d | cat > $PROD_KUBECONFIG
    artifacts:
      paths:
      - $PROD_KUBECONFIG
    tags:
        - startfleet

# Tests
namespaces-test:
    <<: *test-template
    script:
        - export KUBECONFIG=$PROD_KUBECONFIG
        - kubectl apply -f 03-Kubernetes/namespaces/hasura-namespace.yml --dry-run=true
        - kubectl apply -f 03-Kubernetes/namespaces/armadacar-namespace.yml --dry-run=true
        - kubectl apply -f 03-Kubernetes/namespaces/cert-manager-namespace.yml --dry-run=true
        - kubectl apply -f 03-Kubernetes/namespaces/keycloak-namespace.yml --dry-run=true

secrets-test:
    <<: *test-template
    script:
        - export KUBECONFIG=$PROD_KUBECONFIG
        - kubectl apply -f 03-Kubernetes/secrets/armadacar-regsecret.yml --dry-run=true

certificates-test:
    <<: *test-template
    script:
        - export KUBECONFIG=$PROD_KUBECONFIG
        - kubectl apply -f 03-Kubernetes/certificates/armadacar-crt.yml --dry-run=true
        - kubectl apply -f 03-Kubernetes/certificates/hasura-crt.yml --dry-run=true

# Deploy namespaces
armadacar-namespace:
    stage: namespaces
    <<: *deploy-template
    script:
        - export KUBECONFIG=$PROD_KUBECONFIG
        - kubectl apply -f 03-Kubernetes/namespaces/armadacar-namespace.yml
hasura-namespace:
    stage: namespaces
    <<: *deploy-template
    script:
        - export KUBECONFIG=$PROD_KUBECONFIG
        - kubectl apply -f 03-Kubernetes/namespaces/hasura-namespace.yml
cert-manager-namespace:
    stage: namespaces
    <<: *deploy-template
    script:
        - export KUBECONFIG=$PROD_KUBECONFIG
        - kubectl apply -f 03-Kubernetes/namespaces/cert-manager-namespace.yml
keycloak-namespace:
    stage: namespaces
    <<: *deploy-template
    script:
        - export KUBECONFIG=$PROD_KUBECONFIG
        - kubectl apply -f 03-Kubernetes/namespaces/keycloak-namespace.yml
# Deploy secrets
armadacar-secret:
    stage: secrets
    <<: *deploy-template
    script:
        - export KUBECONFIG=$PROD_KUBECONFIG
        # armadacar secret
        - envsubst < 03-Kubernetes/secrets/armadacar-regsecret.yml > armadacar-regsecret.yml
        - kubectl -n armadacar apply -f armadacar-regsecret.yml

# Deploy system
cert-manager:
    stage: system
    <<: *deploy-template
    script:
        - export KUBECONFIG=$PROD_KUBECONFIG
        - kubectl apply -f 03-Kubernetes/system/cert-manager.yaml

# deploy cluster issuer
cluster-issuer:
    # step for the cluster issuer for the certificates bc the cert-manager webhook is long to start
    stage: system
    <<: *deploy-template
    script:
        - export KUBECONFIG=$PROD_KUBECONFIG
        - kubectl -n cert-manager apply -f 03-Kubernetes/system/prod-issuer.yml
# Deploy hasura certificate
hasura:
    stage: certificates
    <<: *deploy-template
    script: 
        - export KUBECONFIG=$PROD_KUBECONFIG
        - kubectl apply -f 03-Kubernetes/certificates/hasura-crt.yml
# Deploy armadacar certificate
armadacar:
    stage: certificates
    <<: *deploy-template
    script: 
        - export KUBECONFIG=$PROD_KUBECONFIG
        - kubectl apply -f 03-Kubernetes/certificates/armadacar-crt.yml
keycloak:
    stage: certificates
    <<: *deploy-template
    script: 
        - export KUBECONFIG=$PROD_KUBECONFIG
        - kubectl apply -f 03-Kubernetes/certificates/keycloak-crt.yml